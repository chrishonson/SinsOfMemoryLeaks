<resources>
    <string name="app_name">Leaks FIXED</string>
    <string name="leak_canary_display_activity_label">Leaks FIXED Canary</string>

    <string name="instruction_check_for_leaks">Go back, force a GC and check HPROF for leaks</string>

    <string name="title_memory_leaks_or_not">Is there a leak?</string>
    <string name="title_memory_leak_via_static_reference">Leak through static references - fixed</string>
    <string name="title_leak_through_long_running_tasks">Leak through long running tasks - fixed</string>

    <string name="text_google_example">Leaking activity context or not?</string>
    <string name="text_leak_to_singleton">Leaking activity context to a singleton object</string>
    <string name="text_leak_to_static_view">Leaking activity to static view</string>
    <string name="text_leak_to_static_variable">Leaking activity to static variable</string>
    <string name="text_leak_to_instance_inner_class">Static variable to an instance of inner class</string>
    <string name="text_leak_to_thread">Leak activity through inner class runnable Thread</string>
    <string name="text_leak_to_handler">Leak activity through inner class runnable Handler</string>
    <string name="text_leak_to_async_task">Leak activity through anonymous class of AsyncTask</string>
    <string name="text_leak_thread">Leak threads</string>
    
    <string name="message_branch">You are running the FIXED branch. The memory leaks are fixed in this version. To see the leaks, switch to LEAK branch and run app.</string>

    <string name="google_leak_not">Google says passing activity context to a dynamically created view causes a memory leak in a 2009 post. Does it still cause a leak in v19+?\n\n%1$s</string>
    <string name="leak_explanation_singleton">The original activity in LEAK branch leaks activity to a singleton manager. The leaks have been fixed in this branch.</string>
    <string name="leak_explanation_static_instance">The original activity in LEAK branch leaks the activity to a static instance. The leaks have been fixed in this branch.</string>
    <string name="leak_explanation_static_variable">The original activity in LEAK branch leaks activity to a static variable of an inner class. The leaks have been fixed in this branch.</string>
    <string name="leak_explanation_async_task">The original activity in LEAK branch leaks activity instance to Anonymous class of AsyncTask. The leaks have been fixed in this branch.</string>
    <string name="leak_explanation_handler">The original activity in LEAK branch leaks activity to handler and runnable inner class. The leaks have been fixed in this branch.</string>
    <string name="leak_explanation_static_view">The original activity in LEAK branch leaks activity to a static view instance. The leaks have been fixed in this branch.\n\n%1$s</string>
    <string name="leak_explanation_leak_threads">This original activity in LEAK branch starts threads but does not terminate them when destroyed. The leaks have been fixed in this branch.</string>
    <string name="leak_explanation_runnable">This original activity in LEAK branch creates and starts long running runnable as an inner class, which leaks the activity instance. The leaks have been fixed in this branch.</string>
</resources>
